// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.11.1.

#![allow(
    non_camel_case_types,
    unused,
    non_snake_case,
    clippy::needless_return,
    clippy::redundant_closure_call,
    clippy::redundant_closure,
    clippy::useless_conversion,
    clippy::unit_arg,
    clippy::unused_unit,
    clippy::double_parens,
    clippy::let_and_return,
    clippy::too_many_arguments,
    clippy::match_single_binding,
    clippy::clone_on_copy,
    clippy::let_unit_value,
    clippy::deref_addrof,
    clippy::explicit_auto_deref,
    clippy::borrow_deref_ref,
    clippy::needless_borrow
)]

// Section: imports

use flutter_rust_bridge::for_generated::byteorder::{NativeEndian, ReadBytesExt, WriteBytesExt};
use flutter_rust_bridge::for_generated::{transform_result_dco, Lifetimeable, Lockable};
use flutter_rust_bridge::{Handler, IntoIntoDart};

// Section: boilerplate

flutter_rust_bridge::frb_generated_boilerplate!(
    default_stream_sink_codec = SseCodec,
    default_rust_opaque = RustOpaqueMoi,
    default_rust_auto_opaque = RustAutoOpaqueMoi,
);
pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_VERSION: &str = "2.11.1";
pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_CONTENT_HASH: i32 = -338652500;

// Section: executor

flutter_rust_bridge::frb_generated_default_handler!();

// Section: wire_funcs

fn wire__crate__api__contacts__add_contact_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "add_contact",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_name = <String>::sse_decode(&mut deserializer);
            let api_address = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, String>(
                    (move || async move {
                        let output_ok =
                            crate::api::contacts::add_contact(api_name, api_address).await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__events__clear_event_queue_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "clear_event_queue",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            transform_result_sse::<_, ()>((move || {
                let output_ok = Result::<_, ()>::Ok(crate::api::events::clear_event_queue())?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__network__connect_to_peer_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "connect_to_peer",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_peer_address = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            transform_result_sse::<_, String>((move || {
                let output_ok = crate::api::network::connect_to_peer(api_peer_address)?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__network__disconnect_from_peer_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "disconnect_from_peer",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_peer_id = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            transform_result_sse::<_, String>((move || {
                let output_ok = crate::api::network::disconnect_from_peer(api_peer_id)?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__events__emit_custom_event_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "emit_custom_event",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_event_type = <String>::sse_decode(&mut deserializer);
            let api_data = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, String>(
                    (move || async move {
                        let output_ok =
                            crate::api::events::emit_custom_event(api_event_type, api_data).await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__core__generate_my_link_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "generate_my_link",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, String>(
                    (move || async move {
                        let output_ok = crate::api::core::generate_my_link().await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__network__get_connected_peers_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "get_connected_peers",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            transform_result_sse::<_, String>((move || {
                let output_ok = crate::api::network::get_connected_peers()?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__contacts__get_contact_by_id_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "get_contact_by_id",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_contact_id = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            transform_result_sse::<_, String>((move || {
                let output_ok = crate::api::contacts::get_contact_by_id(api_contact_id)?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__contacts__get_contacts_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "get_contacts",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            transform_result_sse::<_, String>((move || {
                let output_ok = crate::api::contacts::get_contacts()?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__events__get_event_queue_size_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "get_event_queue_size",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            transform_result_sse::<_, ()>((move || {
                let output_ok = Result::<_, ()>::Ok(crate::api::events::get_event_queue_size())?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__messages__get_messages_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "get_messages",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_contact_id = <String>::sse_decode(&mut deserializer);
            let api_limit = <u32>::sse_decode(&mut deserializer);
            let api__offset = <u32>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, String>(
                    (move || async move {
                        let output_ok = crate::api::messages::get_messages(
                            api_contact_id,
                            api_limit,
                            api__offset,
                        )
                        .await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__network__get_my_network_address_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "get_my_network_address",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            transform_result_sse::<_, String>((move || {
                let output_ok = crate::api::network::get_my_network_address()?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__network__get_network_stats_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "get_network_stats",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            transform_result_sse::<_, String>((move || {
                let output_ok = crate::api::network::get_network_stats()?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__events__get_pending_events_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "get_pending_events",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            transform_result_sse::<_, ()>((move || {
                let output_ok = Result::<_, ()>::Ok(crate::api::events::get_pending_events())?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__messages__get_recent_messages_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "get_recent_messages",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_contact_id = <String>::sse_decode(&mut deserializer);
            let api_limit = <u32>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, String>(
                    (move || async move {
                        let output_ok =
                            crate::api::messages::get_recent_messages(api_contact_id, api_limit)
                                .await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__messages__get_unread_message_count_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "get_unread_message_count",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_contact_id = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            transform_result_sse::<_, String>((move || {
                let output_ok = crate::api::messages::get_unread_message_count(api_contact_id)?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__events__has_pending_events_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "has_pending_events",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            transform_result_sse::<_, ()>((move || {
                let output_ok = Result::<_, ()>::Ok(crate::api::events::has_pending_events())?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__core__initialize_core_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "initialize_core",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, String>(
                    (move || async move {
                        let output_ok = crate::api::core::initialize_core().await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__core__is_core_initialized_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "is_core_initialized",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            transform_result_sse::<_, ()>((move || {
                let output_ok = Result::<_, ()>::Ok(crate::api::core::is_core_initialized())?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__network__is_network_active_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "is_network_active",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            transform_result_sse::<_, String>((move || {
                let output_ok = crate::api::network::is_network_active()?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__network__ping_peer_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "ping_peer",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_peer_id = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            transform_result_sse::<_, String>((move || {
                let output_ok = crate::api::network::ping_peer(api_peer_id)?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__contacts__remove_contact_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "remove_contact",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_contact_id = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, String>(
                    (move || async move {
                        let output_ok =
                            crate::api::contacts::remove_contact(api_contact_id).await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__messages__send_file_message_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "send_file_message",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_contact_id = <String>::sse_decode(&mut deserializer);
            let api_file_path = <String>::sse_decode(&mut deserializer);
            let api_file_name = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, String>(
                    (move || async move {
                        let output_ok = crate::api::messages::send_file_message(
                            api_contact_id,
                            api_file_path,
                            api_file_name,
                        )
                        .await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__messages__send_text_message_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "send_text_message",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_contact_id = <String>::sse_decode(&mut deserializer);
            let api_content = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, String>(
                    (move || async move {
                        let output_ok =
                            crate::api::messages::send_text_message(api_contact_id, api_content)
                                .await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__network__set_network_config_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "set_network_config",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api__max_peers = <u32>::sse_decode(&mut deserializer);
            let api__port = <u16>::sse_decode(&mut deserializer);
            deserializer.end();
            transform_result_sse::<_, String>((move || {
                let output_ok = crate::api::network::set_network_config(api__max_peers, api__port)?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__core__shutdown_core_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "shutdown_core",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            transform_result_sse::<_, String>((move || {
                let output_ok = crate::api::core::shutdown_core()?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__network__start_discovery_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "start_discovery",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            transform_result_sse::<_, String>((move || {
                let output_ok = crate::api::network::start_discovery()?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__events__start_event_listener_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "start_event_listener",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, String>(
                    (move || async move {
                        let output_ok = crate::api::events::start_event_listener().await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__core__start_server_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "start_server",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, String>(
                    (move || async move {
                        let output_ok = crate::api::core::start_server().await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__network__stop_discovery_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "stop_discovery",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            transform_result_sse::<_, String>((move || {
                let output_ok = crate::api::network::stop_discovery()?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__contacts__update_contact_trust_level_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "update_contact_trust_level",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_contact_id = <String>::sse_decode(&mut deserializer);
            let api_trust_level =
                <crate::network::manager::TrustLevel>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, String>(
                    (move || async move {
                        let output_ok = crate::api::contacts::update_contact_trust_level(
                            api_contact_id,
                            api_trust_level,
                        )
                        .await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}

// Section: dart2rust

impl SseDecode for chrono::DateTime<chrono::Utc> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i64>::sse_decode(deserializer);
        return chrono::DateTime::<chrono::Utc>::from_naive_utc_and_offset(
            chrono::DateTime::from_timestamp_micros(inner)
                .expect("invalid or out-of-range datetime")
                .naive_utc(),
            chrono::Utc,
        );
    }
}

impl SseDecode for String {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<u8>>::sse_decode(deserializer);
        return String::from_utf8(inner).unwrap();
    }
}

impl SseDecode for crate::events::bus::AppEvent {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_field0 = <crate::events::bus::NetworkEvent>::sse_decode(deserializer);
                return crate::events::bus::AppEvent::Network(var_field0);
            }
            1 => {
                let mut var_field0 = <crate::events::bus::StorageEvent>::sse_decode(deserializer);
                return crate::events::bus::AppEvent::Storage(var_field0);
            }
            2 => {
                let mut var_field0 = <crate::events::bus::CryptoEvent>::sse_decode(deserializer);
                return crate::events::bus::AppEvent::Crypto(var_field0);
            }
            3 => {
                let mut var_eventType = <String>::sse_decode(deserializer);
                let mut var_data = <String>::sse_decode(deserializer);
                let mut var_timestamp = <u64>::sse_decode(deserializer);
                return crate::events::bus::AppEvent::Custom {
                    event_type: var_eventType,
                    data: var_data,
                    timestamp: var_timestamp,
                };
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for bool {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u8().unwrap() != 0
    }
}

impl SseDecode for crate::network::manager::ChatMessage {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_id = <String>::sse_decode(deserializer);
        let mut var_from = <String>::sse_decode(deserializer);
        let mut var_to = <String>::sse_decode(deserializer);
        let mut var_content = <String>::sse_decode(deserializer);
        let mut var_msgType = <crate::network::manager::ChatMessageType>::sse_decode(deserializer);
        let mut var_timestamp = <u64>::sse_decode(deserializer);
        let mut var_deliveryStatus =
            <crate::network::manager::DeliveryStatus>::sse_decode(deserializer);
        return crate::network::manager::ChatMessage {
            id: var_id,
            from: var_from,
            to: var_to,
            content: var_content,
            msg_type: var_msgType,
            timestamp: var_timestamp,
            delivery_status: var_deliveryStatus,
        };
    }
}

impl SseDecode for crate::network::manager::ChatMessageType {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::network::manager::ChatMessageType::Text,
            1 => crate::network::manager::ChatMessageType::File,
            2 => crate::network::manager::ChatMessageType::Image,
            3 => crate::network::manager::ChatMessageType::Voice,
            _ => unreachable!("Invalid variant for ChatMessageType: {}", inner),
        };
    }
}

impl SseDecode for crate::network::manager::Contact {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_id = <String>::sse_decode(deserializer);
        let mut var_name = <String>::sse_decode(deserializer);
        let mut var_address = <String>::sse_decode(deserializer);
        let mut var_status = <crate::network::manager::ContactStatus>::sse_decode(deserializer);
        let mut var_trustLevel = <crate::network::manager::TrustLevel>::sse_decode(deserializer);
        let mut var_lastSeen = <Option<chrono::DateTime<chrono::Utc>>>::sse_decode(deserializer);
        return crate::network::manager::Contact {
            id: var_id,
            name: var_name,
            address: var_address,
            status: var_status,
            trust_level: var_trustLevel,
            last_seen: var_lastSeen,
        };
    }
}

impl SseDecode for crate::network::manager::ContactStatus {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::network::manager::ContactStatus::Online,
            1 => crate::network::manager::ContactStatus::Offline,
            2 => crate::network::manager::ContactStatus::Away,
            3 => crate::network::manager::ContactStatus::Busy,
            _ => unreachable!("Invalid variant for ContactStatus: {}", inner),
        };
    }
}

impl SseDecode for crate::events::bus::CryptoEvent {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                return crate::events::bus::CryptoEvent::KeyPairGenerated;
            }
            1 => {
                let mut var_error = <String>::sse_decode(deserializer);
                let mut var_operation = <String>::sse_decode(deserializer);
                return crate::events::bus::CryptoEvent::Error {
                    error: var_error,
                    operation: var_operation,
                };
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::network::manager::DeliveryStatus {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::network::manager::DeliveryStatus::Pending,
            1 => crate::network::manager::DeliveryStatus::Sent,
            2 => crate::network::manager::DeliveryStatus::Delivered,
            3 => crate::network::manager::DeliveryStatus::Read,
            4 => crate::network::manager::DeliveryStatus::Failed,
            _ => unreachable!("Invalid variant for DeliveryStatus: {}", inner),
        };
    }
}

impl SseDecode for i32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_i32::<NativeEndian>().unwrap()
    }
}

impl SseDecode for i64 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_i64::<NativeEndian>().unwrap()
    }
}

impl SseDecode for Vec<crate::events::bus::AppEvent> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::events::bus::AppEvent>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::network::manager::ChatMessage> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::network::manager::ChatMessage>::sse_decode(
                deserializer,
            ));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::network::manager::Contact> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::network::manager::Contact>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::network::manager::PeerData> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::network::manager::PeerData>::sse_decode(
                deserializer,
            ));
        }
        return ans_;
    }
}

impl SseDecode for Vec<u8> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<u8>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for crate::events::bus::NetworkEvent {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_port = <u16>::sse_decode(deserializer);
                return crate::events::bus::NetworkEvent::ServerStarted { port: var_port };
            }
            1 => {
                return crate::events::bus::NetworkEvent::ServerStopped;
            }
            2 => {
                let mut var_message =
                    <crate::network::manager::ChatMessage>::sse_decode(deserializer);
                return crate::events::bus::NetworkEvent::MessageReceived {
                    message: var_message,
                };
            }
            3 => {
                let mut var_contact = <crate::network::manager::Contact>::sse_decode(deserializer);
                return crate::events::bus::NetworkEvent::ContactAdded {
                    contact: var_contact,
                };
            }
            4 => {
                let mut var_error = <String>::sse_decode(deserializer);
                let mut var_context = <Option<String>>::sse_decode(deserializer);
                return crate::events::bus::NetworkEvent::Error {
                    error: var_error,
                    context: var_context,
                };
            }
            5 => {
                let mut var_message = <String>::sse_decode(deserializer);
                return crate::events::bus::NetworkEvent::Debug {
                    message: var_message,
                };
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::network::manager::NetworkStats {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_connectedPeers = <u32>::sse_decode(deserializer);
        let mut var_totalMessagesSent = <u64>::sse_decode(deserializer);
        let mut var_totalMessagesReceived = <u64>::sse_decode(deserializer);
        let mut var_bytesSent = <u64>::sse_decode(deserializer);
        let mut var_bytesReceived = <u64>::sse_decode(deserializer);
        let mut var_uptimeSeconds = <u64>::sse_decode(deserializer);
        let mut var_messagesSent = <u64>::sse_decode(deserializer);
        let mut var_messagesReceived = <u64>::sse_decode(deserializer);
        let mut var_totalConnections = <u32>::sse_decode(deserializer);
        return crate::network::manager::NetworkStats {
            connected_peers: var_connectedPeers,
            total_messages_sent: var_totalMessagesSent,
            total_messages_received: var_totalMessagesReceived,
            bytes_sent: var_bytesSent,
            bytes_received: var_bytesReceived,
            uptime_seconds: var_uptimeSeconds,
            messages_sent: var_messagesSent,
            messages_received: var_messagesReceived,
            total_connections: var_totalConnections,
        };
    }
}

impl SseDecode for Option<String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<String>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<chrono::DateTime<chrono::Utc>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<chrono::DateTime<chrono::Utc>>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for crate::network::manager::PeerData {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_id = <String>::sse_decode(deserializer);
        let mut var_name = <String>::sse_decode(deserializer);
        let mut var_address = <String>::sse_decode(deserializer);
        let mut var_publicKey = <Vec<u8>>::sse_decode(deserializer);
        let mut var_connectedAt = <chrono::DateTime<chrono::Utc>>::sse_decode(deserializer);
        let mut var_lastSeen = <chrono::DateTime<chrono::Utc>>::sse_decode(deserializer);
        let mut var_bytesSent = <u64>::sse_decode(deserializer);
        let mut var_bytesReceived = <u64>::sse_decode(deserializer);
        return crate::network::manager::PeerData {
            id: var_id,
            name: var_name,
            address: var_address,
            public_key: var_publicKey,
            connected_at: var_connectedAt,
            last_seen: var_lastSeen,
            bytes_sent: var_bytesSent,
            bytes_received: var_bytesReceived,
        };
    }
}

impl SseDecode for crate::events::bus::StorageEvent {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_count = <usize>::sse_decode(deserializer);
                return crate::events::bus::StorageEvent::ContactsSaved { count: var_count };
            }
            1 => {
                let mut var_count = <usize>::sse_decode(deserializer);
                return crate::events::bus::StorageEvent::ContactsLoaded { count: var_count };
            }
            2 => {
                let mut var_chatId = <String>::sse_decode(deserializer);
                let mut var_messageCount = <usize>::sse_decode(deserializer);
                return crate::events::bus::StorageEvent::ChatHistorySaved {
                    chat_id: var_chatId,
                    message_count: var_messageCount,
                };
            }
            3 => {
                let mut var_chatId = <String>::sse_decode(deserializer);
                let mut var_messageCount = <usize>::sse_decode(deserializer);
                return crate::events::bus::StorageEvent::ChatHistoryLoaded {
                    chat_id: var_chatId,
                    message_count: var_messageCount,
                };
            }
            4 => {
                let mut var_removedItems = <usize>::sse_decode(deserializer);
                return crate::events::bus::StorageEvent::CleanupCompleted {
                    removed_items: var_removedItems,
                };
            }
            5 => {
                let mut var_filePath = <String>::sse_decode(deserializer);
                return crate::events::bus::StorageEvent::BackupCreated {
                    file_path: var_filePath,
                };
            }
            6 => {
                let mut var_error = <String>::sse_decode(deserializer);
                let mut var_operation = <String>::sse_decode(deserializer);
                return crate::events::bus::StorageEvent::Error {
                    error: var_error,
                    operation: var_operation,
                };
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::network::manager::TrustLevel {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::network::manager::TrustLevel::Unknown,
            1 => crate::network::manager::TrustLevel::Pending,
            2 => crate::network::manager::TrustLevel::Low,
            3 => crate::network::manager::TrustLevel::Medium,
            4 => crate::network::manager::TrustLevel::High,
            5 => crate::network::manager::TrustLevel::Trusted,
            6 => crate::network::manager::TrustLevel::Blocked,
            _ => unreachable!("Invalid variant for TrustLevel: {}", inner),
        };
    }
}

impl SseDecode for u16 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u16::<NativeEndian>().unwrap()
    }
}

impl SseDecode for u32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u32::<NativeEndian>().unwrap()
    }
}

impl SseDecode for u64 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u64::<NativeEndian>().unwrap()
    }
}

impl SseDecode for u8 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u8().unwrap()
    }
}

impl SseDecode for () {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {}
}

impl SseDecode for usize {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u64::<NativeEndian>().unwrap() as _
    }
}

fn pde_ffi_dispatcher_primary_impl(
    func_id: i32,
    port: flutter_rust_bridge::for_generated::MessagePort,
    ptr: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len: i32,
    data_len: i32,
) {
    // Codec=Pde (Serialization + dispatch), see doc to use other codecs
    match func_id {
        1 => wire__crate__api__contacts__add_contact_impl(port, ptr, rust_vec_len, data_len),
        5 => wire__crate__api__events__emit_custom_event_impl(port, ptr, rust_vec_len, data_len),
        6 => wire__crate__api__core__generate_my_link_impl(port, ptr, rust_vec_len, data_len),
        11 => wire__crate__api__messages__get_messages_impl(port, ptr, rust_vec_len, data_len),
        15 => {
            wire__crate__api__messages__get_recent_messages_impl(port, ptr, rust_vec_len, data_len)
        }
        18 => wire__crate__api__core__initialize_core_impl(port, ptr, rust_vec_len, data_len),
        22 => wire__crate__api__contacts__remove_contact_impl(port, ptr, rust_vec_len, data_len),
        23 => wire__crate__api__messages__send_file_message_impl(port, ptr, rust_vec_len, data_len),
        24 => wire__crate__api__messages__send_text_message_impl(port, ptr, rust_vec_len, data_len),
        28 => {
            wire__crate__api__events__start_event_listener_impl(port, ptr, rust_vec_len, data_len)
        }
        29 => wire__crate__api__core__start_server_impl(port, ptr, rust_vec_len, data_len),
        31 => wire__crate__api__contacts__update_contact_trust_level_impl(
            port,
            ptr,
            rust_vec_len,
            data_len,
        ),
        _ => unreachable!(),
    }
}

fn pde_ffi_dispatcher_sync_impl(
    func_id: i32,
    ptr: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len: i32,
    data_len: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    // Codec=Pde (Serialization + dispatch), see doc to use other codecs
    match func_id {
        2 => wire__crate__api__events__clear_event_queue_impl(ptr, rust_vec_len, data_len),
        3 => wire__crate__api__network__connect_to_peer_impl(ptr, rust_vec_len, data_len),
        4 => wire__crate__api__network__disconnect_from_peer_impl(ptr, rust_vec_len, data_len),
        7 => wire__crate__api__network__get_connected_peers_impl(ptr, rust_vec_len, data_len),
        8 => wire__crate__api__contacts__get_contact_by_id_impl(ptr, rust_vec_len, data_len),
        9 => wire__crate__api__contacts__get_contacts_impl(ptr, rust_vec_len, data_len),
        10 => wire__crate__api__events__get_event_queue_size_impl(ptr, rust_vec_len, data_len),
        12 => wire__crate__api__network__get_my_network_address_impl(ptr, rust_vec_len, data_len),
        13 => wire__crate__api__network__get_network_stats_impl(ptr, rust_vec_len, data_len),
        14 => wire__crate__api__events__get_pending_events_impl(ptr, rust_vec_len, data_len),
        16 => {
            wire__crate__api__messages__get_unread_message_count_impl(ptr, rust_vec_len, data_len)
        }
        17 => wire__crate__api__events__has_pending_events_impl(ptr, rust_vec_len, data_len),
        19 => wire__crate__api__core__is_core_initialized_impl(ptr, rust_vec_len, data_len),
        20 => wire__crate__api__network__is_network_active_impl(ptr, rust_vec_len, data_len),
        21 => wire__crate__api__network__ping_peer_impl(ptr, rust_vec_len, data_len),
        25 => wire__crate__api__network__set_network_config_impl(ptr, rust_vec_len, data_len),
        26 => wire__crate__api__core__shutdown_core_impl(ptr, rust_vec_len, data_len),
        27 => wire__crate__api__network__start_discovery_impl(ptr, rust_vec_len, data_len),
        30 => wire__crate__api__network__stop_discovery_impl(ptr, rust_vec_len, data_len),
        _ => unreachable!(),
    }
}

// Section: rust2dart

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::events::bus::AppEvent {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::events::bus::AppEvent::Network(field0) => {
                [0.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::events::bus::AppEvent::Storage(field0) => {
                [1.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::events::bus::AppEvent::Crypto(field0) => {
                [2.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::events::bus::AppEvent::Custom {
                event_type,
                data,
                timestamp,
            } => [
                3.into_dart(),
                event_type.into_into_dart().into_dart(),
                data.into_into_dart().into_dart(),
                timestamp.into_into_dart().into_dart(),
            ]
            .into_dart(),
            _ => {
                unimplemented!("");
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::events::bus::AppEvent {}
impl flutter_rust_bridge::IntoIntoDart<crate::events::bus::AppEvent>
    for crate::events::bus::AppEvent
{
    fn into_into_dart(self) -> crate::events::bus::AppEvent {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::network::manager::ChatMessage {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.id.into_into_dart().into_dart(),
            self.from.into_into_dart().into_dart(),
            self.to.into_into_dart().into_dart(),
            self.content.into_into_dart().into_dart(),
            self.msg_type.into_into_dart().into_dart(),
            self.timestamp.into_into_dart().into_dart(),
            self.delivery_status.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::network::manager::ChatMessage
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::network::manager::ChatMessage>
    for crate::network::manager::ChatMessage
{
    fn into_into_dart(self) -> crate::network::manager::ChatMessage {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::network::manager::ChatMessageType {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            Self::Text => 0.into_dart(),
            Self::File => 1.into_dart(),
            Self::Image => 2.into_dart(),
            Self::Voice => 3.into_dart(),
            _ => unreachable!(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::network::manager::ChatMessageType
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::network::manager::ChatMessageType>
    for crate::network::manager::ChatMessageType
{
    fn into_into_dart(self) -> crate::network::manager::ChatMessageType {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::network::manager::Contact {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.id.into_into_dart().into_dart(),
            self.name.into_into_dart().into_dart(),
            self.address.into_into_dart().into_dart(),
            self.status.into_into_dart().into_dart(),
            self.trust_level.into_into_dart().into_dart(),
            self.last_seen.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::network::manager::Contact
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::network::manager::Contact>
    for crate::network::manager::Contact
{
    fn into_into_dart(self) -> crate::network::manager::Contact {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::network::manager::ContactStatus {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            Self::Online => 0.into_dart(),
            Self::Offline => 1.into_dart(),
            Self::Away => 2.into_dart(),
            Self::Busy => 3.into_dart(),
            _ => unreachable!(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::network::manager::ContactStatus
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::network::manager::ContactStatus>
    for crate::network::manager::ContactStatus
{
    fn into_into_dart(self) -> crate::network::manager::ContactStatus {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::events::bus::CryptoEvent {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::events::bus::CryptoEvent::KeyPairGenerated => [0.into_dart()].into_dart(),
            crate::events::bus::CryptoEvent::Error { error, operation } => [
                1.into_dart(),
                error.into_into_dart().into_dart(),
                operation.into_into_dart().into_dart(),
            ]
            .into_dart(),
            _ => {
                unimplemented!("");
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::events::bus::CryptoEvent
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::events::bus::CryptoEvent>
    for crate::events::bus::CryptoEvent
{
    fn into_into_dart(self) -> crate::events::bus::CryptoEvent {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::network::manager::DeliveryStatus {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            Self::Pending => 0.into_dart(),
            Self::Sent => 1.into_dart(),
            Self::Delivered => 2.into_dart(),
            Self::Read => 3.into_dart(),
            Self::Failed => 4.into_dart(),
            _ => unreachable!(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::network::manager::DeliveryStatus
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::network::manager::DeliveryStatus>
    for crate::network::manager::DeliveryStatus
{
    fn into_into_dart(self) -> crate::network::manager::DeliveryStatus {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::events::bus::NetworkEvent {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::events::bus::NetworkEvent::ServerStarted { port } => {
                [0.into_dart(), port.into_into_dart().into_dart()].into_dart()
            }
            crate::events::bus::NetworkEvent::ServerStopped => [1.into_dart()].into_dart(),
            crate::events::bus::NetworkEvent::MessageReceived { message } => {
                [2.into_dart(), message.into_into_dart().into_dart()].into_dart()
            }
            crate::events::bus::NetworkEvent::ContactAdded { contact } => {
                [3.into_dart(), contact.into_into_dart().into_dart()].into_dart()
            }
            crate::events::bus::NetworkEvent::Error { error, context } => [
                4.into_dart(),
                error.into_into_dart().into_dart(),
                context.into_into_dart().into_dart(),
            ]
            .into_dart(),
            crate::events::bus::NetworkEvent::Debug { message } => {
                [5.into_dart(), message.into_into_dart().into_dart()].into_dart()
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::events::bus::NetworkEvent
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::events::bus::NetworkEvent>
    for crate::events::bus::NetworkEvent
{
    fn into_into_dart(self) -> crate::events::bus::NetworkEvent {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::network::manager::NetworkStats {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.connected_peers.into_into_dart().into_dart(),
            self.total_messages_sent.into_into_dart().into_dart(),
            self.total_messages_received.into_into_dart().into_dart(),
            self.bytes_sent.into_into_dart().into_dart(),
            self.bytes_received.into_into_dart().into_dart(),
            self.uptime_seconds.into_into_dart().into_dart(),
            self.messages_sent.into_into_dart().into_dart(),
            self.messages_received.into_into_dart().into_dart(),
            self.total_connections.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::network::manager::NetworkStats
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::network::manager::NetworkStats>
    for crate::network::manager::NetworkStats
{
    fn into_into_dart(self) -> crate::network::manager::NetworkStats {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::network::manager::PeerData {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.id.into_into_dart().into_dart(),
            self.name.into_into_dart().into_dart(),
            self.address.into_into_dart().into_dart(),
            self.public_key.into_into_dart().into_dart(),
            self.connected_at.into_into_dart().into_dart(),
            self.last_seen.into_into_dart().into_dart(),
            self.bytes_sent.into_into_dart().into_dart(),
            self.bytes_received.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::network::manager::PeerData
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::network::manager::PeerData>
    for crate::network::manager::PeerData
{
    fn into_into_dart(self) -> crate::network::manager::PeerData {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::events::bus::StorageEvent {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::events::bus::StorageEvent::ContactsSaved { count } => {
                [0.into_dart(), count.into_into_dart().into_dart()].into_dart()
            }
            crate::events::bus::StorageEvent::ContactsLoaded { count } => {
                [1.into_dart(), count.into_into_dart().into_dart()].into_dart()
            }
            crate::events::bus::StorageEvent::ChatHistorySaved {
                chat_id,
                message_count,
            } => [
                2.into_dart(),
                chat_id.into_into_dart().into_dart(),
                message_count.into_into_dart().into_dart(),
            ]
            .into_dart(),
            crate::events::bus::StorageEvent::ChatHistoryLoaded {
                chat_id,
                message_count,
            } => [
                3.into_dart(),
                chat_id.into_into_dart().into_dart(),
                message_count.into_into_dart().into_dart(),
            ]
            .into_dart(),
            crate::events::bus::StorageEvent::CleanupCompleted { removed_items } => {
                [4.into_dart(), removed_items.into_into_dart().into_dart()].into_dart()
            }
            crate::events::bus::StorageEvent::BackupCreated { file_path } => {
                [5.into_dart(), file_path.into_into_dart().into_dart()].into_dart()
            }
            crate::events::bus::StorageEvent::Error { error, operation } => [
                6.into_dart(),
                error.into_into_dart().into_dart(),
                operation.into_into_dart().into_dart(),
            ]
            .into_dart(),
            _ => {
                unimplemented!("");
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::events::bus::StorageEvent
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::events::bus::StorageEvent>
    for crate::events::bus::StorageEvent
{
    fn into_into_dart(self) -> crate::events::bus::StorageEvent {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::network::manager::TrustLevel {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            Self::Unknown => 0.into_dart(),
            Self::Pending => 1.into_dart(),
            Self::Low => 2.into_dart(),
            Self::Medium => 3.into_dart(),
            Self::High => 4.into_dart(),
            Self::Trusted => 5.into_dart(),
            Self::Blocked => 6.into_dart(),
            _ => unreachable!(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::network::manager::TrustLevel
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::network::manager::TrustLevel>
    for crate::network::manager::TrustLevel
{
    fn into_into_dart(self) -> crate::network::manager::TrustLevel {
        self
    }
}

impl SseEncode for chrono::DateTime<chrono::Utc> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i64>::sse_encode(self.timestamp_micros(), serializer);
    }
}

impl SseEncode for String {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<u8>>::sse_encode(self.into_bytes(), serializer);
    }
}

impl SseEncode for crate::events::bus::AppEvent {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::events::bus::AppEvent::Network(field0) => {
                <i32>::sse_encode(0, serializer);
                <crate::events::bus::NetworkEvent>::sse_encode(field0, serializer);
            }
            crate::events::bus::AppEvent::Storage(field0) => {
                <i32>::sse_encode(1, serializer);
                <crate::events::bus::StorageEvent>::sse_encode(field0, serializer);
            }
            crate::events::bus::AppEvent::Crypto(field0) => {
                <i32>::sse_encode(2, serializer);
                <crate::events::bus::CryptoEvent>::sse_encode(field0, serializer);
            }
            crate::events::bus::AppEvent::Custom {
                event_type,
                data,
                timestamp,
            } => {
                <i32>::sse_encode(3, serializer);
                <String>::sse_encode(event_type, serializer);
                <String>::sse_encode(data, serializer);
                <u64>::sse_encode(timestamp, serializer);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseEncode for bool {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u8(self as _).unwrap();
    }
}

impl SseEncode for crate::network::manager::ChatMessage {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.id, serializer);
        <String>::sse_encode(self.from, serializer);
        <String>::sse_encode(self.to, serializer);
        <String>::sse_encode(self.content, serializer);
        <crate::network::manager::ChatMessageType>::sse_encode(self.msg_type, serializer);
        <u64>::sse_encode(self.timestamp, serializer);
        <crate::network::manager::DeliveryStatus>::sse_encode(self.delivery_status, serializer);
    }
}

impl SseEncode for crate::network::manager::ChatMessageType {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(
            match self {
                crate::network::manager::ChatMessageType::Text => 0,
                crate::network::manager::ChatMessageType::File => 1,
                crate::network::manager::ChatMessageType::Image => 2,
                crate::network::manager::ChatMessageType::Voice => 3,
                _ => {
                    unimplemented!("");
                }
            },
            serializer,
        );
    }
}

impl SseEncode for crate::network::manager::Contact {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.id, serializer);
        <String>::sse_encode(self.name, serializer);
        <String>::sse_encode(self.address, serializer);
        <crate::network::manager::ContactStatus>::sse_encode(self.status, serializer);
        <crate::network::manager::TrustLevel>::sse_encode(self.trust_level, serializer);
        <Option<chrono::DateTime<chrono::Utc>>>::sse_encode(self.last_seen, serializer);
    }
}

impl SseEncode for crate::network::manager::ContactStatus {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(
            match self {
                crate::network::manager::ContactStatus::Online => 0,
                crate::network::manager::ContactStatus::Offline => 1,
                crate::network::manager::ContactStatus::Away => 2,
                crate::network::manager::ContactStatus::Busy => 3,
                _ => {
                    unimplemented!("");
                }
            },
            serializer,
        );
    }
}

impl SseEncode for crate::events::bus::CryptoEvent {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::events::bus::CryptoEvent::KeyPairGenerated => {
                <i32>::sse_encode(0, serializer);
            }
            crate::events::bus::CryptoEvent::Error { error, operation } => {
                <i32>::sse_encode(1, serializer);
                <String>::sse_encode(error, serializer);
                <String>::sse_encode(operation, serializer);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseEncode for crate::network::manager::DeliveryStatus {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(
            match self {
                crate::network::manager::DeliveryStatus::Pending => 0,
                crate::network::manager::DeliveryStatus::Sent => 1,
                crate::network::manager::DeliveryStatus::Delivered => 2,
                crate::network::manager::DeliveryStatus::Read => 3,
                crate::network::manager::DeliveryStatus::Failed => 4,
                _ => {
                    unimplemented!("");
                }
            },
            serializer,
        );
    }
}

impl SseEncode for i32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_i32::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for i64 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_i64::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for Vec<crate::events::bus::AppEvent> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::events::bus::AppEvent>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::network::manager::ChatMessage> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::network::manager::ChatMessage>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::network::manager::Contact> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::network::manager::Contact>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::network::manager::PeerData> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::network::manager::PeerData>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<u8> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <u8>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for crate::events::bus::NetworkEvent {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::events::bus::NetworkEvent::ServerStarted { port } => {
                <i32>::sse_encode(0, serializer);
                <u16>::sse_encode(port, serializer);
            }
            crate::events::bus::NetworkEvent::ServerStopped => {
                <i32>::sse_encode(1, serializer);
            }
            crate::events::bus::NetworkEvent::MessageReceived { message } => {
                <i32>::sse_encode(2, serializer);
                <crate::network::manager::ChatMessage>::sse_encode(message, serializer);
            }
            crate::events::bus::NetworkEvent::ContactAdded { contact } => {
                <i32>::sse_encode(3, serializer);
                <crate::network::manager::Contact>::sse_encode(contact, serializer);
            }
            crate::events::bus::NetworkEvent::Error { error, context } => {
                <i32>::sse_encode(4, serializer);
                <String>::sse_encode(error, serializer);
                <Option<String>>::sse_encode(context, serializer);
            }
            crate::events::bus::NetworkEvent::Debug { message } => {
                <i32>::sse_encode(5, serializer);
                <String>::sse_encode(message, serializer);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseEncode for crate::network::manager::NetworkStats {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <u32>::sse_encode(self.connected_peers, serializer);
        <u64>::sse_encode(self.total_messages_sent, serializer);
        <u64>::sse_encode(self.total_messages_received, serializer);
        <u64>::sse_encode(self.bytes_sent, serializer);
        <u64>::sse_encode(self.bytes_received, serializer);
        <u64>::sse_encode(self.uptime_seconds, serializer);
        <u64>::sse_encode(self.messages_sent, serializer);
        <u64>::sse_encode(self.messages_received, serializer);
        <u32>::sse_encode(self.total_connections, serializer);
    }
}

impl SseEncode for Option<String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <String>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<chrono::DateTime<chrono::Utc>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <chrono::DateTime<chrono::Utc>>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for crate::network::manager::PeerData {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.id, serializer);
        <String>::sse_encode(self.name, serializer);
        <String>::sse_encode(self.address, serializer);
        <Vec<u8>>::sse_encode(self.public_key, serializer);
        <chrono::DateTime<chrono::Utc>>::sse_encode(self.connected_at, serializer);
        <chrono::DateTime<chrono::Utc>>::sse_encode(self.last_seen, serializer);
        <u64>::sse_encode(self.bytes_sent, serializer);
        <u64>::sse_encode(self.bytes_received, serializer);
    }
}

impl SseEncode for crate::events::bus::StorageEvent {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::events::bus::StorageEvent::ContactsSaved { count } => {
                <i32>::sse_encode(0, serializer);
                <usize>::sse_encode(count, serializer);
            }
            crate::events::bus::StorageEvent::ContactsLoaded { count } => {
                <i32>::sse_encode(1, serializer);
                <usize>::sse_encode(count, serializer);
            }
            crate::events::bus::StorageEvent::ChatHistorySaved {
                chat_id,
                message_count,
            } => {
                <i32>::sse_encode(2, serializer);
                <String>::sse_encode(chat_id, serializer);
                <usize>::sse_encode(message_count, serializer);
            }
            crate::events::bus::StorageEvent::ChatHistoryLoaded {
                chat_id,
                message_count,
            } => {
                <i32>::sse_encode(3, serializer);
                <String>::sse_encode(chat_id, serializer);
                <usize>::sse_encode(message_count, serializer);
            }
            crate::events::bus::StorageEvent::CleanupCompleted { removed_items } => {
                <i32>::sse_encode(4, serializer);
                <usize>::sse_encode(removed_items, serializer);
            }
            crate::events::bus::StorageEvent::BackupCreated { file_path } => {
                <i32>::sse_encode(5, serializer);
                <String>::sse_encode(file_path, serializer);
            }
            crate::events::bus::StorageEvent::Error { error, operation } => {
                <i32>::sse_encode(6, serializer);
                <String>::sse_encode(error, serializer);
                <String>::sse_encode(operation, serializer);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseEncode for crate::network::manager::TrustLevel {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(
            match self {
                crate::network::manager::TrustLevel::Unknown => 0,
                crate::network::manager::TrustLevel::Pending => 1,
                crate::network::manager::TrustLevel::Low => 2,
                crate::network::manager::TrustLevel::Medium => 3,
                crate::network::manager::TrustLevel::High => 4,
                crate::network::manager::TrustLevel::Trusted => 5,
                crate::network::manager::TrustLevel::Blocked => 6,
                _ => {
                    unimplemented!("");
                }
            },
            serializer,
        );
    }
}

impl SseEncode for u16 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u16::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for u32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u32::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for u64 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u64::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for u8 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u8(self).unwrap();
    }
}

impl SseEncode for () {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {}
}

impl SseEncode for usize {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer
            .cursor
            .write_u64::<NativeEndian>(self as _)
            .unwrap();
    }
}

#[cfg(not(target_family = "wasm"))]
mod io {
    // This file is automatically generated, so please do not edit it.
    // @generated by `flutter_rust_bridge`@ 2.11.1.

    // Section: imports

    use super::*;
    use flutter_rust_bridge::for_generated::byteorder::{
        NativeEndian, ReadBytesExt, WriteBytesExt,
    };
    use flutter_rust_bridge::for_generated::{transform_result_dco, Lifetimeable, Lockable};
    use flutter_rust_bridge::{Handler, IntoIntoDart};

    // Section: boilerplate

    flutter_rust_bridge::frb_generated_boilerplate_io!();
}
#[cfg(not(target_family = "wasm"))]
pub use io::*;

/// cbindgen:ignore
#[cfg(target_family = "wasm")]
mod web {
    // This file is automatically generated, so please do not edit it.
    // @generated by `flutter_rust_bridge`@ 2.11.1.

    // Section: imports

    use super::*;
    use flutter_rust_bridge::for_generated::byteorder::{
        NativeEndian, ReadBytesExt, WriteBytesExt,
    };
    use flutter_rust_bridge::for_generated::wasm_bindgen;
    use flutter_rust_bridge::for_generated::wasm_bindgen::prelude::*;
    use flutter_rust_bridge::for_generated::{transform_result_dco, Lifetimeable, Lockable};
    use flutter_rust_bridge::{Handler, IntoIntoDart};

    // Section: boilerplate

    flutter_rust_bridge::frb_generated_boilerplate_web!();
}
#[cfg(target_family = "wasm")]
pub use web::*;
