// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.11.1.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import 'frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

class ChatMessage {
  final String id;
  final String from;
  final String to;
  final String content;
  final ChatMessageType msgType;
  final BigInt timestamp;
  final DeliveryStatus deliveryStatus;

  const ChatMessage({
    required this.id,
    required this.from,
    required this.to,
    required this.content,
    required this.msgType,
    required this.timestamp,
    required this.deliveryStatus,
  });

  @override
  int get hashCode =>
      id.hashCode ^
      from.hashCode ^
      to.hashCode ^
      content.hashCode ^
      msgType.hashCode ^
      timestamp.hashCode ^
      deliveryStatus.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is ChatMessage &&
          runtimeType == other.runtimeType &&
          id == other.id &&
          from == other.from &&
          to == other.to &&
          content == other.content &&
          msgType == other.msgType &&
          timestamp == other.timestamp &&
          deliveryStatus == other.deliveryStatus;
}

enum ChatMessageType { text, file, image, voice }

class Contact {
  final String id;
  final String name;
  final String address;
  final ContactStatus status;
  final TrustLevel trustLevel;
  final DateTime? lastSeen;

  const Contact({
    required this.id,
    required this.name,
    required this.address,
    required this.status,
    required this.trustLevel,
    this.lastSeen,
  });

  @override
  int get hashCode =>
      id.hashCode ^ name.hashCode ^ address.hashCode ^ status.hashCode ^ trustLevel.hashCode ^ lastSeen.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is Contact &&
          runtimeType == other.runtimeType &&
          id == other.id &&
          name == other.name &&
          address == other.address &&
          status == other.status &&
          trustLevel == other.trustLevel &&
          lastSeen == other.lastSeen;
}

enum ContactStatus { online, offline, away, busy }

enum DeliveryStatus { pending, sent, delivered, read, failed }

class NetworkStats {
  final int connectedPeers;
  final BigInt totalMessagesSent;
  final BigInt totalMessagesReceived;
  final BigInt bytesSent;
  final BigInt bytesReceived;
  final BigInt uptimeSeconds;

  const NetworkStats({
    required this.connectedPeers,
    required this.totalMessagesSent,
    required this.totalMessagesReceived,
    required this.bytesSent,
    required this.bytesReceived,
    required this.uptimeSeconds,
  });

  @override
  int get hashCode =>
      connectedPeers.hashCode ^
      totalMessagesSent.hashCode ^
      totalMessagesReceived.hashCode ^
      bytesSent.hashCode ^
      bytesReceived.hashCode ^
      uptimeSeconds.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is NetworkStats &&
          runtimeType == other.runtimeType &&
          connectedPeers == other.connectedPeers &&
          totalMessagesSent == other.totalMessagesSent &&
          totalMessagesReceived == other.totalMessagesReceived &&
          bytesSent == other.bytesSent &&
          bytesReceived == other.bytesReceived &&
          uptimeSeconds == other.uptimeSeconds;
}

class PeerData {
  final String id;
  final String name;
  final String address;
  final Uint8List publicKey;
  final DateTime connectedAt;
  final DateTime lastSeen;
  final BigInt bytesSent;
  final BigInt bytesReceived;

  const PeerData({
    required this.id,
    required this.name,
    required this.address,
    required this.publicKey,
    required this.connectedAt,
    required this.lastSeen,
    required this.bytesSent,
    required this.bytesReceived,
  });

  @override
  int get hashCode =>
      id.hashCode ^
      name.hashCode ^
      address.hashCode ^
      publicKey.hashCode ^
      connectedAt.hashCode ^
      lastSeen.hashCode ^
      bytesSent.hashCode ^
      bytesReceived.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is PeerData &&
          runtimeType == other.runtimeType &&
          id == other.id &&
          name == other.name &&
          address == other.address &&
          publicKey == other.publicKey &&
          connectedAt == other.connectedAt &&
          lastSeen == other.lastSeen &&
          bytesSent == other.bytesSent &&
          bytesReceived == other.bytesReceived;
}

enum TrustLevel { unknown, pending, trusted, blocked }
