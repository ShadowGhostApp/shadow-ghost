// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.11.1.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api/contacts.dart';
import 'api/core.dart';
import 'api/messages.dart';
import 'api/network.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.dart';
import 'frb_generated.io.dart' if (dart.library.js_interop) 'frb_generated.web.dart';
import 'network.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'storage.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
    bool forceSameCodegenVersion = true,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
      forceSameCodegenVersion: forceSameCodegenVersion,
    );
  }

  /// Initialize flutter_rust_bridge in mock mode.
  /// No libraries for FFI are loaded.
  static void initMock({required RustLibApi api}) {
    instance.initMockImpl(api: api);
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor => RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor => RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {}

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig => kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.11.1';

  @override
  int get rustContentHash => -1576473557;

  static const kDefaultExternalLibraryLoaderConfig = ExternalLibraryLoaderConfig(
    stem: 'shadowghost',
    ioDirectory: 'rust/target/release/',
    webPrefix: 'pkg/',
  );
}

abstract class RustLibApi extends BaseApi {
  Contact crateApiContactsAddContact({required String name, required String publicKey});

  String crateApiContactsBlockContact({required String contactId});

  String crateApiNetworkConnectToPeer({required String peerAddress});

  String crateApiMessagesDeleteMessage({required String messageId});

  String crateApiNetworkDisconnectFromPeer({required String peerId});

  List<PeerData> crateApiNetworkGetConnectedPeers();

  Contact crateApiContactsGetContactById({required String contactId});

  List<Contact> crateApiContactsGetContacts();

  ChatMessage crateApiMessagesGetMessageById({required String messageId});

  List<ChatMessage> crateApiMessagesGetMessages({required String contactId});

  String crateApiNetworkGetMyNetworkAddress();

  String crateApiCoreGetMyPublicKey();

  NetworkStats crateApiNetworkGetNetworkStats();

  List<ChatMessage> crateApiMessagesGetRecentMessages({required String contactId, required int limit});

  StorageStats crateApiCoreGetStorageStats();

  int crateApiMessagesGetUnreadMessageCount({required String contactId});

  String crateApiCoreInitCore();

  bool crateApiCoreIsCoreInitialized();

  bool crateApiNetworkIsNetworkActive();

  String crateApiMessagesMarkMessageAsRead({required String messageId});

  BigInt crateApiNetworkPingPeer({required String peerId});

  String crateApiContactsRemoveContact({required String contactId});

  List<ChatMessage> crateApiMessagesSearchMessages({required String query, String? contactId});

  String crateApiMessagesSendTextMessage({required String contactId, required String content});

  String crateApiNetworkSetNetworkConfig({required int maxPeers, required int port});

  String crateApiCoreShutdownCore();

  String crateApiNetworkStartDiscovery();

  String crateApiNetworkStopDiscovery();

  String crateApiContactsUnblockContact({required String contactId});

  String crateApiContactsUpdateContactName({required String contactId, required String newName});
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  Contact crateApiContactsAddContact({required String name, required String publicKey}) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(name, serializer);
          sse_encode_String(publicKey, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1)!;
        },
        codec: SseCodec(decodeSuccessData: sse_decode_contact, decodeErrorData: sse_decode_String),
        constMeta: kCrateApiContactsAddContactConstMeta,
        argValues: [name, publicKey],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiContactsAddContactConstMeta =>
      const TaskConstMeta(debugName: "add_contact", argNames: ["name", "publicKey"]);

  @override
  String crateApiContactsBlockContact({required String contactId}) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(contactId, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 2)!;
        },
        codec: SseCodec(decodeSuccessData: sse_decode_String, decodeErrorData: sse_decode_String),
        constMeta: kCrateApiContactsBlockContactConstMeta,
        argValues: [contactId],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiContactsBlockContactConstMeta =>
      const TaskConstMeta(debugName: "block_contact", argNames: ["contactId"]);

  @override
  String crateApiNetworkConnectToPeer({required String peerAddress}) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(peerAddress, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 3)!;
        },
        codec: SseCodec(decodeSuccessData: sse_decode_String, decodeErrorData: sse_decode_String),
        constMeta: kCrateApiNetworkConnectToPeerConstMeta,
        argValues: [peerAddress],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiNetworkConnectToPeerConstMeta =>
      const TaskConstMeta(debugName: "connect_to_peer", argNames: ["peerAddress"]);

  @override
  String crateApiMessagesDeleteMessage({required String messageId}) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(messageId, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 4)!;
        },
        codec: SseCodec(decodeSuccessData: sse_decode_String, decodeErrorData: sse_decode_String),
        constMeta: kCrateApiMessagesDeleteMessageConstMeta,
        argValues: [messageId],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiMessagesDeleteMessageConstMeta =>
      const TaskConstMeta(debugName: "delete_message", argNames: ["messageId"]);

  @override
  String crateApiNetworkDisconnectFromPeer({required String peerId}) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(peerId, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 5)!;
        },
        codec: SseCodec(decodeSuccessData: sse_decode_String, decodeErrorData: sse_decode_String),
        constMeta: kCrateApiNetworkDisconnectFromPeerConstMeta,
        argValues: [peerId],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiNetworkDisconnectFromPeerConstMeta =>
      const TaskConstMeta(debugName: "disconnect_from_peer", argNames: ["peerId"]);

  @override
  List<PeerData> crateApiNetworkGetConnectedPeers() {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 6)!;
        },
        codec: SseCodec(decodeSuccessData: sse_decode_list_peer_data, decodeErrorData: sse_decode_String),
        constMeta: kCrateApiNetworkGetConnectedPeersConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiNetworkGetConnectedPeersConstMeta =>
      const TaskConstMeta(debugName: "get_connected_peers", argNames: []);

  @override
  Contact crateApiContactsGetContactById({required String contactId}) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(contactId, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 7)!;
        },
        codec: SseCodec(decodeSuccessData: sse_decode_contact, decodeErrorData: sse_decode_String),
        constMeta: kCrateApiContactsGetContactByIdConstMeta,
        argValues: [contactId],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiContactsGetContactByIdConstMeta =>
      const TaskConstMeta(debugName: "get_contact_by_id", argNames: ["contactId"]);

  @override
  List<Contact> crateApiContactsGetContacts() {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 8)!;
        },
        codec: SseCodec(decodeSuccessData: sse_decode_list_contact, decodeErrorData: sse_decode_String),
        constMeta: kCrateApiContactsGetContactsConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiContactsGetContactsConstMeta =>
      const TaskConstMeta(debugName: "get_contacts", argNames: []);

  @override
  ChatMessage crateApiMessagesGetMessageById({required String messageId}) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(messageId, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 9)!;
        },
        codec: SseCodec(decodeSuccessData: sse_decode_chat_message, decodeErrorData: sse_decode_String),
        constMeta: kCrateApiMessagesGetMessageByIdConstMeta,
        argValues: [messageId],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiMessagesGetMessageByIdConstMeta =>
      const TaskConstMeta(debugName: "get_message_by_id", argNames: ["messageId"]);

  @override
  List<ChatMessage> crateApiMessagesGetMessages({required String contactId}) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(contactId, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 10)!;
        },
        codec: SseCodec(decodeSuccessData: sse_decode_list_chat_message, decodeErrorData: sse_decode_String),
        constMeta: kCrateApiMessagesGetMessagesConstMeta,
        argValues: [contactId],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiMessagesGetMessagesConstMeta =>
      const TaskConstMeta(debugName: "get_messages", argNames: ["contactId"]);

  @override
  String crateApiNetworkGetMyNetworkAddress() {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 11)!;
        },
        codec: SseCodec(decodeSuccessData: sse_decode_String, decodeErrorData: sse_decode_String),
        constMeta: kCrateApiNetworkGetMyNetworkAddressConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiNetworkGetMyNetworkAddressConstMeta =>
      const TaskConstMeta(debugName: "get_my_network_address", argNames: []);

  @override
  String crateApiCoreGetMyPublicKey() {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 12)!;
        },
        codec: SseCodec(decodeSuccessData: sse_decode_String, decodeErrorData: sse_decode_String),
        constMeta: kCrateApiCoreGetMyPublicKeyConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiCoreGetMyPublicKeyConstMeta =>
      const TaskConstMeta(debugName: "get_my_public_key", argNames: []);

  @override
  NetworkStats crateApiNetworkGetNetworkStats() {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 13)!;
        },
        codec: SseCodec(decodeSuccessData: sse_decode_network_stats, decodeErrorData: sse_decode_String),
        constMeta: kCrateApiNetworkGetNetworkStatsConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiNetworkGetNetworkStatsConstMeta =>
      const TaskConstMeta(debugName: "get_network_stats", argNames: []);

  @override
  List<ChatMessage> crateApiMessagesGetRecentMessages({required String contactId, required int limit}) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(contactId, serializer);
          sse_encode_u_32(limit, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 14)!;
        },
        codec: SseCodec(decodeSuccessData: sse_decode_list_chat_message, decodeErrorData: sse_decode_String),
        constMeta: kCrateApiMessagesGetRecentMessagesConstMeta,
        argValues: [contactId, limit],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiMessagesGetRecentMessagesConstMeta =>
      const TaskConstMeta(debugName: "get_recent_messages", argNames: ["contactId", "limit"]);

  @override
  StorageStats crateApiCoreGetStorageStats() {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 15)!;
        },
        codec: SseCodec(decodeSuccessData: sse_decode_storage_stats, decodeErrorData: sse_decode_String),
        constMeta: kCrateApiCoreGetStorageStatsConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiCoreGetStorageStatsConstMeta =>
      const TaskConstMeta(debugName: "get_storage_stats", argNames: []);

  @override
  int crateApiMessagesGetUnreadMessageCount({required String contactId}) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(contactId, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 16)!;
        },
        codec: SseCodec(decodeSuccessData: sse_decode_u_32, decodeErrorData: sse_decode_String),
        constMeta: kCrateApiMessagesGetUnreadMessageCountConstMeta,
        argValues: [contactId],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiMessagesGetUnreadMessageCountConstMeta =>
      const TaskConstMeta(debugName: "get_unread_message_count", argNames: ["contactId"]);

  @override
  String crateApiCoreInitCore() {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 17)!;
        },
        codec: SseCodec(decodeSuccessData: sse_decode_String, decodeErrorData: sse_decode_String),
        constMeta: kCrateApiCoreInitCoreConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiCoreInitCoreConstMeta => const TaskConstMeta(debugName: "init_core", argNames: []);

  @override
  bool crateApiCoreIsCoreInitialized() {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 18)!;
        },
        codec: SseCodec(decodeSuccessData: sse_decode_bool, decodeErrorData: null),
        constMeta: kCrateApiCoreIsCoreInitializedConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiCoreIsCoreInitializedConstMeta =>
      const TaskConstMeta(debugName: "is_core_initialized", argNames: []);

  @override
  bool crateApiNetworkIsNetworkActive() {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 19)!;
        },
        codec: SseCodec(decodeSuccessData: sse_decode_bool, decodeErrorData: sse_decode_String),
        constMeta: kCrateApiNetworkIsNetworkActiveConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiNetworkIsNetworkActiveConstMeta =>
      const TaskConstMeta(debugName: "is_network_active", argNames: []);

  @override
  String crateApiMessagesMarkMessageAsRead({required String messageId}) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(messageId, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 20)!;
        },
        codec: SseCodec(decodeSuccessData: sse_decode_String, decodeErrorData: sse_decode_String),
        constMeta: kCrateApiMessagesMarkMessageAsReadConstMeta,
        argValues: [messageId],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiMessagesMarkMessageAsReadConstMeta =>
      const TaskConstMeta(debugName: "mark_message_as_read", argNames: ["messageId"]);

  @override
  BigInt crateApiNetworkPingPeer({required String peerId}) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(peerId, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 21)!;
        },
        codec: SseCodec(decodeSuccessData: sse_decode_u_64, decodeErrorData: sse_decode_String),
        constMeta: kCrateApiNetworkPingPeerConstMeta,
        argValues: [peerId],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiNetworkPingPeerConstMeta =>
      const TaskConstMeta(debugName: "ping_peer", argNames: ["peerId"]);

  @override
  String crateApiContactsRemoveContact({required String contactId}) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(contactId, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 22)!;
        },
        codec: SseCodec(decodeSuccessData: sse_decode_String, decodeErrorData: sse_decode_String),
        constMeta: kCrateApiContactsRemoveContactConstMeta,
        argValues: [contactId],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiContactsRemoveContactConstMeta =>
      const TaskConstMeta(debugName: "remove_contact", argNames: ["contactId"]);

  @override
  List<ChatMessage> crateApiMessagesSearchMessages({required String query, String? contactId}) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(query, serializer);
          sse_encode_opt_String(contactId, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 23)!;
        },
        codec: SseCodec(decodeSuccessData: sse_decode_list_chat_message, decodeErrorData: sse_decode_String),
        constMeta: kCrateApiMessagesSearchMessagesConstMeta,
        argValues: [query, contactId],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiMessagesSearchMessagesConstMeta =>
      const TaskConstMeta(debugName: "search_messages", argNames: ["query", "contactId"]);

  @override
  String crateApiMessagesSendTextMessage({required String contactId, required String content}) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(contactId, serializer);
          sse_encode_String(content, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 24)!;
        },
        codec: SseCodec(decodeSuccessData: sse_decode_String, decodeErrorData: sse_decode_String),
        constMeta: kCrateApiMessagesSendTextMessageConstMeta,
        argValues: [contactId, content],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiMessagesSendTextMessageConstMeta =>
      const TaskConstMeta(debugName: "send_text_message", argNames: ["contactId", "content"]);

  @override
  String crateApiNetworkSetNetworkConfig({required int maxPeers, required int port}) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_u_32(maxPeers, serializer);
          sse_encode_u_16(port, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 25)!;
        },
        codec: SseCodec(decodeSuccessData: sse_decode_String, decodeErrorData: sse_decode_String),
        constMeta: kCrateApiNetworkSetNetworkConfigConstMeta,
        argValues: [maxPeers, port],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiNetworkSetNetworkConfigConstMeta =>
      const TaskConstMeta(debugName: "set_network_config", argNames: ["maxPeers", "port"]);

  @override
  String crateApiCoreShutdownCore() {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 26)!;
        },
        codec: SseCodec(decodeSuccessData: sse_decode_String, decodeErrorData: sse_decode_String),
        constMeta: kCrateApiCoreShutdownCoreConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiCoreShutdownCoreConstMeta => const TaskConstMeta(debugName: "shutdown_core", argNames: []);

  @override
  String crateApiNetworkStartDiscovery() {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 27)!;
        },
        codec: SseCodec(decodeSuccessData: sse_decode_String, decodeErrorData: sse_decode_String),
        constMeta: kCrateApiNetworkStartDiscoveryConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiNetworkStartDiscoveryConstMeta =>
      const TaskConstMeta(debugName: "start_discovery", argNames: []);

  @override
  String crateApiNetworkStopDiscovery() {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 28)!;
        },
        codec: SseCodec(decodeSuccessData: sse_decode_String, decodeErrorData: sse_decode_String),
        constMeta: kCrateApiNetworkStopDiscoveryConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiNetworkStopDiscoveryConstMeta =>
      const TaskConstMeta(debugName: "stop_discovery", argNames: []);

  @override
  String crateApiContactsUnblockContact({required String contactId}) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(contactId, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 29)!;
        },
        codec: SseCodec(decodeSuccessData: sse_decode_String, decodeErrorData: sse_decode_String),
        constMeta: kCrateApiContactsUnblockContactConstMeta,
        argValues: [contactId],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiContactsUnblockContactConstMeta =>
      const TaskConstMeta(debugName: "unblock_contact", argNames: ["contactId"]);

  @override
  String crateApiContactsUpdateContactName({required String contactId, required String newName}) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(contactId, serializer);
          sse_encode_String(newName, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 30)!;
        },
        codec: SseCodec(decodeSuccessData: sse_decode_String, decodeErrorData: sse_decode_String),
        constMeta: kCrateApiContactsUpdateContactNameConstMeta,
        argValues: [contactId, newName],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiContactsUpdateContactNameConstMeta =>
      const TaskConstMeta(debugName: "update_contact_name", argNames: ["contactId", "newName"]);

  @protected
  DateTime dco_decode_Chrono_Utc(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeTimestamp(ts: dco_decode_i_64(raw).toInt(), isUtc: true);
  }

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  bool dco_decode_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  DateTime dco_decode_box_autoadd_Chrono_Utc(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_Chrono_Utc(raw);
  }

  @protected
  ChatMessage dco_decode_chat_message(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 7) throw Exception('unexpected arr length: expect 7 but see ${arr.length}');
    return ChatMessage(
      id: dco_decode_String(arr[0]),
      from: dco_decode_String(arr[1]),
      to: dco_decode_String(arr[2]),
      content: dco_decode_String(arr[3]),
      msgType: dco_decode_chat_message_type(arr[4]),
      timestamp: dco_decode_u_64(arr[5]),
      deliveryStatus: dco_decode_delivery_status(arr[6]),
    );
  }

  @protected
  ChatMessageType dco_decode_chat_message_type(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ChatMessageType.values[raw as int];
  }

  @protected
  Contact dco_decode_contact(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 6) throw Exception('unexpected arr length: expect 6 but see ${arr.length}');
    return Contact(
      id: dco_decode_String(arr[0]),
      name: dco_decode_String(arr[1]),
      address: dco_decode_String(arr[2]),
      status: dco_decode_contact_status(arr[3]),
      trustLevel: dco_decode_trust_level(arr[4]),
      lastSeen: dco_decode_opt_box_autoadd_Chrono_Utc(arr[5]),
    );
  }

  @protected
  ContactStatus dco_decode_contact_status(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ContactStatus.values[raw as int];
  }

  @protected
  DeliveryStatus dco_decode_delivery_status(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return DeliveryStatus.values[raw as int];
  }

  @protected
  int dco_decode_i_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  PlatformInt64 dco_decode_i_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeI64(raw);
  }

  @protected
  List<ChatMessage> dco_decode_list_chat_message(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_chat_message).toList();
  }

  @protected
  List<Contact> dco_decode_list_contact(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_contact).toList();
  }

  @protected
  List<PeerData> dco_decode_list_peer_data(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_peer_data).toList();
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  NetworkStats dco_decode_network_stats(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 6) throw Exception('unexpected arr length: expect 6 but see ${arr.length}');
    return NetworkStats(
      connectedPeers: dco_decode_u_32(arr[0]),
      totalMessagesSent: dco_decode_u_64(arr[1]),
      totalMessagesReceived: dco_decode_u_64(arr[2]),
      bytesSent: dco_decode_u_64(arr[3]),
      bytesReceived: dco_decode_u_64(arr[4]),
      uptimeSeconds: dco_decode_u_64(arr[5]),
    );
  }

  @protected
  String? dco_decode_opt_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_String(raw);
  }

  @protected
  DateTime? dco_decode_opt_box_autoadd_Chrono_Utc(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_Chrono_Utc(raw);
  }

  @protected
  PeerData dco_decode_peer_data(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 8) throw Exception('unexpected arr length: expect 8 but see ${arr.length}');
    return PeerData(
      id: dco_decode_String(arr[0]),
      name: dco_decode_String(arr[1]),
      address: dco_decode_String(arr[2]),
      publicKey: dco_decode_list_prim_u_8_strict(arr[3]),
      connectedAt: dco_decode_Chrono_Utc(arr[4]),
      lastSeen: dco_decode_Chrono_Utc(arr[5]),
      bytesSent: dco_decode_u_64(arr[6]),
      bytesReceived: dco_decode_u_64(arr[7]),
    );
  }

  @protected
  StorageStats dco_decode_storage_stats(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4) throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return StorageStats(
      totalContacts: dco_decode_u_64(arr[0]),
      totalMessages: dco_decode_u_64(arr[1]),
      storageSizeBytes: dco_decode_u_64(arr[2]),
      lastBackup: dco_decode_opt_box_autoadd_Chrono_Utc(arr[3]),
    );
  }

  @protected
  TrustLevel dco_decode_trust_level(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return TrustLevel.values[raw as int];
  }

  @protected
  int dco_decode_u_16(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  int dco_decode_u_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  BigInt dco_decode_u_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  DateTime sse_decode_Chrono_Utc(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_64(deserializer);
    return DateTime.fromMicrosecondsSinceEpoch(inner.toInt(), isUtc: true);
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  DateTime sse_decode_box_autoadd_Chrono_Utc(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_Chrono_Utc(deserializer));
  }

  @protected
  ChatMessage sse_decode_chat_message(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_String(deserializer);
    var var_from = sse_decode_String(deserializer);
    var var_to = sse_decode_String(deserializer);
    var var_content = sse_decode_String(deserializer);
    var var_msgType = sse_decode_chat_message_type(deserializer);
    var var_timestamp = sse_decode_u_64(deserializer);
    var var_deliveryStatus = sse_decode_delivery_status(deserializer);
    return ChatMessage(
      id: var_id,
      from: var_from,
      to: var_to,
      content: var_content,
      msgType: var_msgType,
      timestamp: var_timestamp,
      deliveryStatus: var_deliveryStatus,
    );
  }

  @protected
  ChatMessageType sse_decode_chat_message_type(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return ChatMessageType.values[inner];
  }

  @protected
  Contact sse_decode_contact(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_String(deserializer);
    var var_name = sse_decode_String(deserializer);
    var var_address = sse_decode_String(deserializer);
    var var_status = sse_decode_contact_status(deserializer);
    var var_trustLevel = sse_decode_trust_level(deserializer);
    var var_lastSeen = sse_decode_opt_box_autoadd_Chrono_Utc(deserializer);
    return Contact(
      id: var_id,
      name: var_name,
      address: var_address,
      status: var_status,
      trustLevel: var_trustLevel,
      lastSeen: var_lastSeen,
    );
  }

  @protected
  ContactStatus sse_decode_contact_status(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return ContactStatus.values[inner];
  }

  @protected
  DeliveryStatus sse_decode_delivery_status(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return DeliveryStatus.values[inner];
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  PlatformInt64 sse_decode_i_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getPlatformInt64();
  }

  @protected
  List<ChatMessage> sse_decode_list_chat_message(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <ChatMessage>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_chat_message(deserializer));
    }
    return ans_;
  }

  @protected
  List<Contact> sse_decode_list_contact(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <Contact>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_contact(deserializer));
    }
    return ans_;
  }

  @protected
  List<PeerData> sse_decode_list_peer_data(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <PeerData>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_peer_data(deserializer));
    }
    return ans_;
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  NetworkStats sse_decode_network_stats(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_connectedPeers = sse_decode_u_32(deserializer);
    var var_totalMessagesSent = sse_decode_u_64(deserializer);
    var var_totalMessagesReceived = sse_decode_u_64(deserializer);
    var var_bytesSent = sse_decode_u_64(deserializer);
    var var_bytesReceived = sse_decode_u_64(deserializer);
    var var_uptimeSeconds = sse_decode_u_64(deserializer);
    return NetworkStats(
      connectedPeers: var_connectedPeers,
      totalMessagesSent: var_totalMessagesSent,
      totalMessagesReceived: var_totalMessagesReceived,
      bytesSent: var_bytesSent,
      bytesReceived: var_bytesReceived,
      uptimeSeconds: var_uptimeSeconds,
    );
  }

  @protected
  String? sse_decode_opt_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_String(deserializer));
    } else {
      return null;
    }
  }

  @protected
  DateTime? sse_decode_opt_box_autoadd_Chrono_Utc(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_Chrono_Utc(deserializer));
    } else {
      return null;
    }
  }

  @protected
  PeerData sse_decode_peer_data(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_String(deserializer);
    var var_name = sse_decode_String(deserializer);
    var var_address = sse_decode_String(deserializer);
    var var_publicKey = sse_decode_list_prim_u_8_strict(deserializer);
    var var_connectedAt = sse_decode_Chrono_Utc(deserializer);
    var var_lastSeen = sse_decode_Chrono_Utc(deserializer);
    var var_bytesSent = sse_decode_u_64(deserializer);
    var var_bytesReceived = sse_decode_u_64(deserializer);
    return PeerData(
      id: var_id,
      name: var_name,
      address: var_address,
      publicKey: var_publicKey,
      connectedAt: var_connectedAt,
      lastSeen: var_lastSeen,
      bytesSent: var_bytesSent,
      bytesReceived: var_bytesReceived,
    );
  }

  @protected
  StorageStats sse_decode_storage_stats(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_totalContacts = sse_decode_u_64(deserializer);
    var var_totalMessages = sse_decode_u_64(deserializer);
    var var_storageSizeBytes = sse_decode_u_64(deserializer);
    var var_lastBackup = sse_decode_opt_box_autoadd_Chrono_Utc(deserializer);
    return StorageStats(
      totalContacts: var_totalContacts,
      totalMessages: var_totalMessages,
      storageSizeBytes: var_storageSizeBytes,
      lastBackup: var_lastBackup,
    );
  }

  @protected
  TrustLevel sse_decode_trust_level(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return TrustLevel.values[inner];
  }

  @protected
  int sse_decode_u_16(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint16();
  }

  @protected
  int sse_decode_u_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint32();
  }

  @protected
  BigInt sse_decode_u_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_Chrono_Utc(DateTime self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_64(PlatformInt64Util.from(self.microsecondsSinceEpoch), serializer);
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }

  @protected
  void sse_encode_box_autoadd_Chrono_Utc(DateTime self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Chrono_Utc(self, serializer);
  }

  @protected
  void sse_encode_chat_message(ChatMessage self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.id, serializer);
    sse_encode_String(self.from, serializer);
    sse_encode_String(self.to, serializer);
    sse_encode_String(self.content, serializer);
    sse_encode_chat_message_type(self.msgType, serializer);
    sse_encode_u_64(self.timestamp, serializer);
    sse_encode_delivery_status(self.deliveryStatus, serializer);
  }

  @protected
  void sse_encode_chat_message_type(ChatMessageType self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_contact(Contact self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.id, serializer);
    sse_encode_String(self.name, serializer);
    sse_encode_String(self.address, serializer);
    sse_encode_contact_status(self.status, serializer);
    sse_encode_trust_level(self.trustLevel, serializer);
    sse_encode_opt_box_autoadd_Chrono_Utc(self.lastSeen, serializer);
  }

  @protected
  void sse_encode_contact_status(ContactStatus self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_delivery_status(DeliveryStatus self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }

  @protected
  void sse_encode_i_64(PlatformInt64 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putPlatformInt64(self);
  }

  @protected
  void sse_encode_list_chat_message(List<ChatMessage> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_chat_message(item, serializer);
    }
  }

  @protected
  void sse_encode_list_contact(List<Contact> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_contact(item, serializer);
    }
  }

  @protected
  void sse_encode_list_peer_data(List<PeerData> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_peer_data(item, serializer);
    }
  }

  @protected
  void sse_encode_list_prim_u_8_strict(Uint8List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_network_stats(NetworkStats self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_32(self.connectedPeers, serializer);
    sse_encode_u_64(self.totalMessagesSent, serializer);
    sse_encode_u_64(self.totalMessagesReceived, serializer);
    sse_encode_u_64(self.bytesSent, serializer);
    sse_encode_u_64(self.bytesReceived, serializer);
    sse_encode_u_64(self.uptimeSeconds, serializer);
  }

  @protected
  void sse_encode_opt_String(String? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_String(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_Chrono_Utc(DateTime? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_Chrono_Utc(self, serializer);
    }
  }

  @protected
  void sse_encode_peer_data(PeerData self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.id, serializer);
    sse_encode_String(self.name, serializer);
    sse_encode_String(self.address, serializer);
    sse_encode_list_prim_u_8_strict(self.publicKey, serializer);
    sse_encode_Chrono_Utc(self.connectedAt, serializer);
    sse_encode_Chrono_Utc(self.lastSeen, serializer);
    sse_encode_u_64(self.bytesSent, serializer);
    sse_encode_u_64(self.bytesReceived, serializer);
  }

  @protected
  void sse_encode_storage_stats(StorageStats self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_64(self.totalContacts, serializer);
    sse_encode_u_64(self.totalMessages, serializer);
    sse_encode_u_64(self.storageSizeBytes, serializer);
    sse_encode_opt_box_autoadd_Chrono_Utc(self.lastBackup, serializer);
  }

  @protected
  void sse_encode_trust_level(TrustLevel self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_u_16(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint16(self);
  }

  @protected
  void sse_encode_u_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint32(self);
  }

  @protected
  void sse_encode_u_64(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }
}
