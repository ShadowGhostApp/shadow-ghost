// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.11.1.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api/contacts.dart';
import 'api/core.dart';
import 'api/events.dart';
import 'api/messages.dart';
import 'api/network.dart';
import 'dart:async';
import 'dart:convert';
import 'dart:ffi' as ffi;
import 'events/bus.dart';
import 'frb_generated.dart';
import 'network/manager.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated_io.dart';

abstract class RustLibApiImplPlatform extends BaseApiImpl<RustLibWire> {
  RustLibApiImplPlatform({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @protected
  DateTime dco_decode_Chrono_Utc(dynamic raw);

  @protected
  String dco_decode_String(dynamic raw);

  @protected
  AppEvent dco_decode_app_event(dynamic raw);

  @protected
  bool dco_decode_bool(dynamic raw);

  @protected
  DateTime dco_decode_box_autoadd_Chrono_Utc(dynamic raw);

  @protected
  ChatMessage dco_decode_box_autoadd_chat_message(dynamic raw);

  @protected
  Contact dco_decode_box_autoadd_contact(dynamic raw);

  @protected
  CryptoEvent dco_decode_box_autoadd_crypto_event(dynamic raw);

  @protected
  NetworkEvent dco_decode_box_autoadd_network_event(dynamic raw);

  @protected
  StorageEvent dco_decode_box_autoadd_storage_event(dynamic raw);

  @protected
  ChatMessage dco_decode_chat_message(dynamic raw);

  @protected
  ChatMessageType dco_decode_chat_message_type(dynamic raw);

  @protected
  Contact dco_decode_contact(dynamic raw);

  @protected
  ContactStatus dco_decode_contact_status(dynamic raw);

  @protected
  CryptoEvent dco_decode_crypto_event(dynamic raw);

  @protected
  DeliveryStatus dco_decode_delivery_status(dynamic raw);

  @protected
  int dco_decode_i_32(dynamic raw);

  @protected
  PlatformInt64 dco_decode_i_64(dynamic raw);

  @protected
  List<AppEvent> dco_decode_list_app_event(dynamic raw);

  @protected
  List<ChatMessage> dco_decode_list_chat_message(dynamic raw);

  @protected
  List<Contact> dco_decode_list_contact(dynamic raw);

  @protected
  List<PeerData> dco_decode_list_peer_data(dynamic raw);

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw);

  @protected
  NetworkEvent dco_decode_network_event(dynamic raw);

  @protected
  NetworkStats dco_decode_network_stats(dynamic raw);

  @protected
  String? dco_decode_opt_String(dynamic raw);

  @protected
  DateTime? dco_decode_opt_box_autoadd_Chrono_Utc(dynamic raw);

  @protected
  PeerData dco_decode_peer_data(dynamic raw);

  @protected
  StorageEvent dco_decode_storage_event(dynamic raw);

  @protected
  TrustLevel dco_decode_trust_level(dynamic raw);

  @protected
  int dco_decode_u_16(dynamic raw);

  @protected
  int dco_decode_u_32(dynamic raw);

  @protected
  BigInt dco_decode_u_64(dynamic raw);

  @protected
  int dco_decode_u_8(dynamic raw);

  @protected
  void dco_decode_unit(dynamic raw);

  @protected
  BigInt dco_decode_usize(dynamic raw);

  @protected
  DateTime sse_decode_Chrono_Utc(SseDeserializer deserializer);

  @protected
  String sse_decode_String(SseDeserializer deserializer);

  @protected
  AppEvent sse_decode_app_event(SseDeserializer deserializer);

  @protected
  bool sse_decode_bool(SseDeserializer deserializer);

  @protected
  DateTime sse_decode_box_autoadd_Chrono_Utc(SseDeserializer deserializer);

  @protected
  ChatMessage sse_decode_box_autoadd_chat_message(SseDeserializer deserializer);

  @protected
  Contact sse_decode_box_autoadd_contact(SseDeserializer deserializer);

  @protected
  CryptoEvent sse_decode_box_autoadd_crypto_event(SseDeserializer deserializer);

  @protected
  NetworkEvent sse_decode_box_autoadd_network_event(SseDeserializer deserializer);

  @protected
  StorageEvent sse_decode_box_autoadd_storage_event(SseDeserializer deserializer);

  @protected
  ChatMessage sse_decode_chat_message(SseDeserializer deserializer);

  @protected
  ChatMessageType sse_decode_chat_message_type(SseDeserializer deserializer);

  @protected
  Contact sse_decode_contact(SseDeserializer deserializer);

  @protected
  ContactStatus sse_decode_contact_status(SseDeserializer deserializer);

  @protected
  CryptoEvent sse_decode_crypto_event(SseDeserializer deserializer);

  @protected
  DeliveryStatus sse_decode_delivery_status(SseDeserializer deserializer);

  @protected
  int sse_decode_i_32(SseDeserializer deserializer);

  @protected
  PlatformInt64 sse_decode_i_64(SseDeserializer deserializer);

  @protected
  List<AppEvent> sse_decode_list_app_event(SseDeserializer deserializer);

  @protected
  List<ChatMessage> sse_decode_list_chat_message(SseDeserializer deserializer);

  @protected
  List<Contact> sse_decode_list_contact(SseDeserializer deserializer);

  @protected
  List<PeerData> sse_decode_list_peer_data(SseDeserializer deserializer);

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer);

  @protected
  NetworkEvent sse_decode_network_event(SseDeserializer deserializer);

  @protected
  NetworkStats sse_decode_network_stats(SseDeserializer deserializer);

  @protected
  String? sse_decode_opt_String(SseDeserializer deserializer);

  @protected
  DateTime? sse_decode_opt_box_autoadd_Chrono_Utc(SseDeserializer deserializer);

  @protected
  PeerData sse_decode_peer_data(SseDeserializer deserializer);

  @protected
  StorageEvent sse_decode_storage_event(SseDeserializer deserializer);

  @protected
  TrustLevel sse_decode_trust_level(SseDeserializer deserializer);

  @protected
  int sse_decode_u_16(SseDeserializer deserializer);

  @protected
  int sse_decode_u_32(SseDeserializer deserializer);

  @protected
  BigInt sse_decode_u_64(SseDeserializer deserializer);

  @protected
  int sse_decode_u_8(SseDeserializer deserializer);

  @protected
  void sse_decode_unit(SseDeserializer deserializer);

  @protected
  BigInt sse_decode_usize(SseDeserializer deserializer);

  @protected
  void sse_encode_Chrono_Utc(DateTime self, SseSerializer serializer);

  @protected
  void sse_encode_String(String self, SseSerializer serializer);

  @protected
  void sse_encode_app_event(AppEvent self, SseSerializer serializer);

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_Chrono_Utc(DateTime self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_chat_message(ChatMessage self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_contact(Contact self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_crypto_event(CryptoEvent self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_network_event(NetworkEvent self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_storage_event(StorageEvent self, SseSerializer serializer);

  @protected
  void sse_encode_chat_message(ChatMessage self, SseSerializer serializer);

  @protected
  void sse_encode_chat_message_type(ChatMessageType self, SseSerializer serializer);

  @protected
  void sse_encode_contact(Contact self, SseSerializer serializer);

  @protected
  void sse_encode_contact_status(ContactStatus self, SseSerializer serializer);

  @protected
  void sse_encode_crypto_event(CryptoEvent self, SseSerializer serializer);

  @protected
  void sse_encode_delivery_status(DeliveryStatus self, SseSerializer serializer);

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer);

  @protected
  void sse_encode_i_64(PlatformInt64 self, SseSerializer serializer);

  @protected
  void sse_encode_list_app_event(List<AppEvent> self, SseSerializer serializer);

  @protected
  void sse_encode_list_chat_message(List<ChatMessage> self, SseSerializer serializer);

  @protected
  void sse_encode_list_contact(List<Contact> self, SseSerializer serializer);

  @protected
  void sse_encode_list_peer_data(List<PeerData> self, SseSerializer serializer);

  @protected
  void sse_encode_list_prim_u_8_strict(Uint8List self, SseSerializer serializer);

  @protected
  void sse_encode_network_event(NetworkEvent self, SseSerializer serializer);

  @protected
  void sse_encode_network_stats(NetworkStats self, SseSerializer serializer);

  @protected
  void sse_encode_opt_String(String? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_Chrono_Utc(DateTime? self, SseSerializer serializer);

  @protected
  void sse_encode_peer_data(PeerData self, SseSerializer serializer);

  @protected
  void sse_encode_storage_event(StorageEvent self, SseSerializer serializer);

  @protected
  void sse_encode_trust_level(TrustLevel self, SseSerializer serializer);

  @protected
  void sse_encode_u_16(int self, SseSerializer serializer);

  @protected
  void sse_encode_u_32(int self, SseSerializer serializer);

  @protected
  void sse_encode_u_64(BigInt self, SseSerializer serializer);

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer);

  @protected
  void sse_encode_unit(void self, SseSerializer serializer);

  @protected
  void sse_encode_usize(BigInt self, SseSerializer serializer);
}

// Section: wire_class

class RustLibWire implements BaseWire {
  factory RustLibWire.fromExternalLibrary(ExternalLibrary lib) => RustLibWire(lib.ffiDynamicLibrary);

  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName) _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  RustLibWire(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;
}
