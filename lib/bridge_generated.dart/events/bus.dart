// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.11.1.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import '../network/manager.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'package:freezed_annotation/freezed_annotation.dart' hide protected;
part 'bus.freezed.dart';

@freezed
sealed class AppEvent with _$AppEvent {
  const AppEvent._();

  const factory AppEvent.network(NetworkEvent field0) = AppEvent_Network;
  const factory AppEvent.storage(StorageEvent field0) = AppEvent_Storage;
  const factory AppEvent.crypto(CryptoEvent field0) = AppEvent_Crypto;
  const factory AppEvent.custom({required String eventType, required String data, required BigInt timestamp}) =
      AppEvent_Custom;
}

@freezed
sealed class CryptoEvent with _$CryptoEvent {
  const CryptoEvent._();

  const factory CryptoEvent.keyPairGenerated() = CryptoEvent_KeyPairGenerated;
  const factory CryptoEvent.error({required String error, required String operation}) = CryptoEvent_Error;
}

@freezed
sealed class NetworkEvent with _$NetworkEvent {
  const NetworkEvent._();

  const factory NetworkEvent.serverStarted({required int port}) = NetworkEvent_ServerStarted;
  const factory NetworkEvent.serverStopped() = NetworkEvent_ServerStopped;
  const factory NetworkEvent.messageReceived({required ChatMessage message}) = NetworkEvent_MessageReceived;
  const factory NetworkEvent.contactAdded({required Contact contact}) = NetworkEvent_ContactAdded;
  const factory NetworkEvent.error({required String error, String? context}) = NetworkEvent_Error;
  const factory NetworkEvent.debug({required String message}) = NetworkEvent_Debug;
}

@freezed
sealed class StorageEvent with _$StorageEvent {
  const StorageEvent._();

  const factory StorageEvent.contactsSaved({required BigInt count}) = StorageEvent_ContactsSaved;
  const factory StorageEvent.contactsLoaded({required BigInt count}) = StorageEvent_ContactsLoaded;
  const factory StorageEvent.chatHistorySaved({required String chatId, required BigInt messageCount}) =
      StorageEvent_ChatHistorySaved;
  const factory StorageEvent.chatHistoryLoaded({required String chatId, required BigInt messageCount}) =
      StorageEvent_ChatHistoryLoaded;
  const factory StorageEvent.cleanupCompleted({required BigInt removedItems}) = StorageEvent_CleanupCompleted;
  const factory StorageEvent.backupCreated({required String filePath}) = StorageEvent_BackupCreated;
  const factory StorageEvent.error({required String error, required String operation}) = StorageEvent_Error;
}
